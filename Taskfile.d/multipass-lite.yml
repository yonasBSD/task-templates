---
# https://taskfile.dev

version: '3'

vars:

tasks:

  mount:
    desc: "[MULTIPASS] Mount the current directory inside an instance. Arguments: HOST|H=docker (*)"
    summary: |
      [MULTIPASS] Mount a local directory inside the instance.
      Usage: task multipass-lite:mount HOST|H=<hostname>

      Arguments:
       HOST | H   Hostname (required)
    vars:
      HOST: '{{default .H .HOST}}'
      D_SOURCE: .
    cmds:
      - |
        full_path=$(readlink -f "{{.D_SOURCE}}")
        if [ -z "${full_path}" ]; then echo "Error: directory \"{{.D_SOURCE}}\" not found" && exit 1; fi
        mounts=$(multipass info "{{.HOST}}" | grep "=>" | awk '{ print $NF }' | tr '\n' ',' | sed 's/,$//')
        if echo "${mounts}" | grep -q "${full_path}" 2>/dev/null; then
          echo "${full_path} is already mounted."
        else
          multipass mount "${full_path}" "{{.HOST}}"
          echo "${full_path} is now mounted."
        fi
    preconditions:
      - sh: command -v multipass
        msg: "multipass is not installed"
      - sh: test -n "{{.HOST}}" || test -n "{{.H}}"
        msg: "HOST|H argument is required"
    silent: true

  umount:
    desc: "[MULTIPASS] Unmount the current directory from an instance. Arguments: HOST|H=docker (*)"
    summary: |
      [MULTIPASS] Unmount a directory from an instance.
      Usage: task multipass:umount HOST|H=<hostname>

      Arguments:
       HOST | H Hostname (required)
    vars:
      HOST: '{{default .H .HOST}}'
      D_SOURCE: .
    cmds:
      - |
        full_path=$(readlink -f "{{.D_SOURCE}}")
        if [ -z "${full_path}" ]; then echo "Error: directory \"{{.D_SOURCE}}\" not found" && exit 1; fi
        multipass umount "{{.HOST}}:${full_path}"
        echo "${full_path} is now unmounted."
    preconditions:
      - sh: command -v multipass
        msg: "multipass is not installed"
      - sh: test -n "{{.HOST}}" || test -n "{{.H}}"
        msg: "HOST|H argument is required"
    silent: true
