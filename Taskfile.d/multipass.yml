---
# https://taskfile.dev
# @description: A set of tasks to manage Multipass VM
# @tags: multipass, CLI
# @authors: FX Soubirou <soubirou@yahoo.fr>
# @file-raw: https://gitlab.com/op_so/task/task-templates/-/raw/main/Taskfile.d/multipass.yml
# @file-ui: https://gitlab.com/op_so/task/task-templates/-/blob/main/Taskfile.d/multipass.yml
# @home: https://gitlab.com/op_so/task/task-templates
# @links: [Multipass](https://multipass.run/)
# @license: MIT
# @status: beta
# @deprecated-tasks:

version: '3'

vars:
  DIR_CONFIG: config  # Configuration directory relative path
  DIR_HOST: ".host"  # .host directory relative path
  DIR_SSH: "{{.DIR_HOST}}/ssh"  # ssh key directory relative path
  DEFAULT_CONFIG_PATH: "{{.DIR_CONFIG}}/multipass.yml"  # Default configuration file relative path
  DEFAULT_NAME: multipass-default  # Default Multipass instance name
  DEFAULT_UUSER: ubuntu  # Instance default username
  DEFAULT_CPU: 1  # Instance default CPU
  DEFAULT_MEM: 1G  # Instance default memory size
  DEFAULT_DISK: 5G  # Instance default disk size
  DEFAULT_IMG: lts  # Instance default image
  DEFAULT_CONFIG: |
    ---
    instances:
      - name: {{.DEFAULT_NAME}}
        user: {{.DEFAULT_UUSER}}
        image: {{.DEFAULT_IMG}}
        cpu: {{.DEFAULT_CPU}}
        mem: {{.DEFAULT_MEM}}
        disk: {{.DEFAULT_DISK}}
        mounts:
          - /users/my_home_dir
        metadata:
          - metadata1: "my metadata"

tasks:

  create-from-config:
    desc: "Create instances from a config file. Arguments: [CONFIG|C={{.DEFAULT_CONFIG_PATH}}] (*)"
    summary: |
      [MULTIPASS] Create instances from a config file.
      A default multipass.yml file is created, if it does not exist.
      Usage: task multipass:create-from-config [CONFIG|C={{.DEFAULT_CONFIG_PATH}}]

      Arguments:
       CONFIG | C: Config file path (optional, by default {{.DEFAULT_CONFIG_PATH}})
    vars:
      CONFIG: '{{.CONFIG | default .C | default .DEFAULT_CONFIG_PATH}}'
    cmds:
      - if [ ! -f "{{.CONFIG}}" ]; then echo "{{.DEFAULT_CONFIG}}" > "{{.CONFIG}}" && printf "\033[0;32mConfig file \"%s\" is created.\033[0m\n" "{{.CONFIG}}"; fi
      - |
        block_start_list=$(awk '/^  - name: .*$/{ print NR}' "{{.CONFIG}}")
        block_count=$(printf "%s" "$block_start_list" | grep -c "^")
        n=0
        printf '%s\n' "$block_start_list" |
        while IFS= read -r start; do
          n=$((n+1))
          if [ "$n" = "$block_count" ]; then
            end=$(wc -l < "{{.CONFIG}}" | tr -d ' ')
          else
            line_next_block=$(echo "$block_start_list" | head -n $((n+1)) | tail -1)
            end=$((line_next_block-1))
          fi
          block=$(head -n "$end" "{{.CONFIG}}" | tail -$((end-start+1)))

          if ! (echo "$block" | grep -q " name: "); then
            printf "\033[0;31m[ERROR] name attribute is not defined for the instance %s!\033[0m\n" "$n"
            exit 1
          fi
          name=$(echo "$block" | grep " name: " | awk -F ":" '{print $2}' | tr -d ' ')
          user=$(echo "$block" | grep " user: " | awk -F ":" '{print $2}' | tr -d ' ')
          image=$(echo "$block" | grep " image: " | awk -F ":" '{print $2}' | tr -d ' ')
          cpu=$(echo "$block" | grep " cpu: " | awk -F ":" '{print $2}' | tr -d ' ')
          mem=$(echo "$block" | grep " mem: " | awk -F ":" '{print $2}' | tr -d ' ')
          disk=$(echo "$block" | grep " disk: " | awk -F ":" '{print $2}' | tr -d ' ')
          if [ -z "$user" ]; then
            arg_user=""
          else
            arg_user="U_USER=$user"
          fi
          if [ -z "$image" ]; then
            arg_image=""
          else
            arg_image="IMG=$image"
          fi
          if [ -z "$cpu" ]; then
            arg_cpu=""
          else
            arg_cpu="CPU=$cpu"
          fi
          if [ -z "$mem" ]; then
            arg_mem=""
          else
            arg_mem="MEM=$mem"
          fi
          if [ -z "$disk" ]; then
            arg_disk=""
          else
            arg_disk="DISK=$disk"
          fi
          task multipass:create-instance "NAME=$name" "$arg_user" "$arg_image" "$arg_cpu" "$arg_mem" "$arg_disk"
        done
    silent: true

  create-instance:
    desc: "Create an instance. Arguments: NAME|N=instance_name [U_USER|U=ubuntu] [CPU|C=1] [MEM|M=1G] [DISK|D=5G] [IMG|I=jammy] (*)"
    summary: |
      [MULTIPASS] Create an instance.
      A key pair k-<instance_name>-1.pem is generated for every instance in {{.DIR_SSH}}/ directory.
      A default cloud-init file will be used except if a file named cloud-init-<instance_name>.yml
      exists in the {{.DIR_CONFIG}}/ directory.
      Usage: task multipass:create-instance NAME|N=<instance_name> [U_USER|U=ubuntu] [CPU|C=1] [MEM|M=1G] [DISK|D=5G] [IMG|I=jammy]

      Arguments:
       NAME   | N: Name for the instance (required)
       U_USER | U: Username (optional, by default {{.DEFAULT_USER}})
       CPU    | C: Number of CPUs to allocate (optional, by default {{.DEFAULT_CPU}})
       MEM    | M: Amount of memory to allocate (optional, by default {{.DEFAULT_MEM}})
       DISK   | D: Disk space to allocate (optional, by default {{.DEFAULT_DISK}})
       IMG    | I: Image to launch (optional, by default {{.DEFAULT_IMG}})
    vars:
      NAME: '{{.NAME | default .N}}'
      U_USER: '{{.U_USER | default .U | default .DEFAULT_UUSER}}'
      CPU: '{{.CPU | default .C | default .DEFAULT_CPU}}'
      MEM: '{{.MEM | default .M | default .DEFAULT_MEM}}'
      DISK: '{{.DISK | default .D | default .DEFAULT_DISK}}'
      IMG: '{{.IMG | default .I | default .DEFAULT_IMG}}'
      DEFAULT_CLOUD_INIT: |
        ---
        users:
          - name: {{.U_USER}}
            sudo: ALL=(ALL) NOPASSWD:ALL
            ssh-authorized-keys:
              - __SSH_KEY__
        write_files:
          - path: /etc/systemd/timesyncd.conf
            content: |
              [Time]
              PollIntervalMinSec=16
              PollIntervalMaxSec=32
        runcmd:
          - timedatectl set-ntp true
          - systemctl restart systemd-timesyncd

      FILE_REF_CLOUD_INIT_PREFIX: "{{.DIR_CONFIG}}/cloud-init"
      FILE_CLOUD_INIT: "{{.DIR_HOST}}/cloud-init.yml"
      KEY_PATH: "{{.DIR_SSH}}/k-{{.NAME}}-1.pem"
      MULTIPASS_TIMEOUT: 600
    cmds:
      - task crypto:generate-key KEY={{.KEY_PATH}}
      - if test -f "{{.FILE_REF_CLOUD_INIT_PREFIX}}-{{.NAME}}.yml"; then cp -f "{{.FILE_REF_CLOUD_INIT_PREFIX}}-{{.NAME}}.yml" "{{.FILE_CLOUD_INIT}}"; else echo "{{.DEFAULT_CLOUD_INIT}}" > "{{.FILE_CLOUD_INIT}}"; fi
      - KEY_PUB=$(cat "{{.KEY_PATH}}.pub") && sed -i.bu "s#__SSH_KEY__#${KEY_PUB}#g" "{{.FILE_CLOUD_INIT}}"
      - rm -f "{{.FILE_CLOUD_INIT}}.bu"
      - multipass launch "{{.IMG}}" --name "{{.NAME}}" --cpus "{{.CPU}}" --memory "{{.MEM}}" --disk "{{.DISK}}" --cloud-init "{{.FILE_CLOUD_INIT}}" --timeout "{{.MULTIPASS_TIMEOUT}}"
      - rm "{{.FILE_CLOUD_INIT}}"
      - multipass stop "{{.NAME}}"
      - sleep 5 && multipass start "{{.NAME}}"
    status:
      - if multipass list | grep -q "^{{.NAME}} "; then exit 0; else exit 1; fi
    preconditions:
      - sh: command -v multipass
        msg: "multipass is not installed"
      - sh: test -n "{{.NAME}}"
        msg: "NAME|N argument is required"
    silent: true

  start:
    desc: "Start instances. Arguments: [NAME|N=instance_name] [CONFIG|C={{.DEFAULT_CONFIG_PATH}}] (*)"
    summary: |
      [MULTIPASS] Start an instance by its name or start all instances of the config file if NAME is not set.
      Usage: task multipass:start [NAME|N=instance_name] [CONFIG|C={{.DEFAULT_CONFIG_PATH}}]

      Arguments:
        NAME   | N: Name for the instance (optional)
        CONFIG | C: Config file path (optional, by default {{.DEFAULT_CONFIG_PATH}})
    vars:
      CONFIG: '{{.CONFIG | default .C | default .DEFAULT_CONFIG_PATH}}'
      NAME: '{{default .N .NAME}}'
    cmds:
      - if [ ! -f "{{.CONFIG}}" ]; then printf "\033[0;31m[ERROR] Config file \"%s\" is not found!\033[0m\n" "{{.CONFIG}}" && exit 1; fi
      - |
        instances=$(cat "{{.CONFIG}}" | grep " name: " | awk -F ":" '{print $2}' | tr -d ' ')
        if [ -z "{{.NAME}}" ]; then
          printf '%s\n' "$instances" |
          while IFS= read -r instance; do
            multipass start "$instance"
          done
        else
          if echo "${instances}" | grep -q "^{{.NAME}}$" 2>/dev/null; then
            multipass start "{{.NAME}}"
          else
            printf "\033[0;31m[ERROR] Instance name \"%s\" is not found in the config file \"%s\"!\033[0m\n" "{{.NAME}}" "{{.CONFIG}}" && exit 1
          fi
        fi
    preconditions:
      - sh: command -v multipass
        msg: "multipass is not installed"
    silent: true

  stop:
    desc: "Stop instances. Arguments: [NAME|N=instance_name] [CONFIG|C={{.DEFAULT_CONFIG_PATH}}] (*)"
    summary: |
      [MULTIPASS] Stop an instance by its name or stop all instances of the config file if NAME is not set.
      Usage: task multipass:stop [NAME|N=instance_name] [CONFIG|C={{.DEFAULT_CONFIG_PATH}}]

      Arguments:
        NAME   | N:  Name for the instance (optional)
        CONFIG | C:  Config file path (optional, by default {{.DEFAULT_CONFIG_PATH}})
    vars:
      NAME: '{{default .N .NAME}}'
      CONFIG: '{{.CONFIG | default .C | default .DEFAULT_CONFIG_PATH}}'
    cmds:
      - if [ ! -f "{{.CONFIG}}" ]; then printf "\033[0;31m[ERROR] Config file \"%s\" is not found!\033[0m\n" "{{.CONFIG}}" && exit 1; fi
      - |
        instances=$(cat "{{.CONFIG}}" | grep " name: " | awk -F ":" '{print $2}' | tr -d ' ')
        if [ -z "{{.NAME}}" ]; then
          printf '%s\n' "$instances" |
          while IFS= read -r instance; do
            multipass stop "$instance"
          done
        else
          if echo "${instances}" | grep -q "^{{.NAME}}$" 2>/dev/null; then
            multipass stop "{{.NAME}}"
          else
            printf "\033[0;31m[ERROR] Instance name \"%s\" is not found in the config file \"%s\"!\033[0m\n" "{{.NAME}}" "{{.CONFIG}}" && exit 1
          fi
        fi
    preconditions:
      - sh: command -v multipass
        msg: "multipass is not installed"
    silent: true

  ssh:
    desc: "ssh connection. Arguments: NAME|N=docker [U_USER|U=ubuntu] (*)"
    summary: |
      [SYSTEM] ssh connection.
      Usage: task multipass:ssh NAME|N=<hostname> [U_USER|U=<username>]

      Arguments:
       NAME   | N: Name of the instance (required)
       U_USER | U: Username (optional, by default {{.DEFAULT_UUSER}})
    vars:
      NAME: '{{.NAME | default .N}}'
      IP:
        sh: multipass list | grep "^{{.NAME}} " | awk '{print $3}'
      KEY_PATH: "{{.DIR_SSH}}/k-{{.NAME}}-1.pem"
      U_USER: '{{.U_USER | default .U | default .DEFAULT_UUSER}}'
      SSH_ARGS: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
    cmds:
      - ssh -i '{{.KEY_PATH}}' {{.SSH_ARGS}} {{.U_USER}}@{{.IP}}
    preconditions:
      - sh: command -v multipass
        msg: "multipass is not installed"
      - sh: test -n "{{.NAME}}"
        msg: "NAME|N argument is required"
      - sh: test -f "{{.KEY_PATH}}"
        msg: "Key file {{.KEY_PATH}} not found"
    interactive: true
    silent: true

  delete:
    desc: "Delete instances. Arguments: [NAME|N=instance_name] [CONFIG|C={{.DEFAULT_CONFIG_PATH}}] [FORCE|F=y|Y] (*)"
    summary: |
      [MULTIPASS] Stop an instance by its name or delete all instances of the config file if NAME is not set.
      Usage: task multipass:stop [NAME|N=instance_name] [CONFIG|C={{.DEFAULT_CONFIG_PATH}}] [FORCE|F=y|Y]

      Arguments:
        NAME   | N: Name for the instance (optional)
        CONFIG | C: Config file path (optional, by default {{.DEFAULT_CONFIG_PATH}})
        FORCE  | F: Delete instances without confirmation (optional, by default no)
    vars:
      NAME: '{{.NAME | default .N}}'
      CONFIG: '{{.CONFIG | default .C | default .DEFAULT_CONFIG_PATH}}'
      FORCE: '{{.FORCE | default .F}}'
    cmds:
      - if [ ! -f "{{.CONFIG}}" ]; then printf "\033[0;31m[ERROR] Config file \"%s\" is not found!\033[0m\n" "{{.CONFIG}}" && exit 1; fi
      - |
        instances=$(cat "{{.CONFIG}}" | grep " name: " | awk -F ":" '{print $2}' | tr -d ' ')
        if [ -z "{{.NAME}}" ]; then
          if [ "{{.FORCE}}" == "y" ] || [ "{{.FORCE}}" == "Y" ]; then
            printf '%s\n' "$instances" |
            while IFS= read -r instance; do
              multipass delete "$instance"
            done
          else
            echo "$instances"
            read -p "Are you sure to delete these instances? (y/[n]) " -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
              printf '%s\n' "$instances" |
              while IFS= read -r instance; do
                multipass delete "$instance"
              done
            fi
          fi
        else
          if echo "$instances" | grep -q "^{{.NAME}}$" 2>/dev/null; then
            if [ "{{.FORCE}}" == "y" ] || [ "{{.FORCE}}" == "Y" ]; then
              multipass delete "{{.NAME}}"
            else
              read -p "Are you sure to delete \"{{.NAME}}\"? (y/[n]) " -r
              echo
              if [[ $REPLY =~ ^[Yy]$ ]]; then
                multipass delete "{{.NAME}}"
              fi
            fi
          else
            printf "\033[0;31m[ERROR] Instance name \"%s\" is not found in the config file \"%s\"!\033[0m\n" "{{.NAME}}" "{{.CONFIG}}" && exit 1
          fi
        fi
      - multipass purge
    preconditions:
      - sh: command -v multipass
        msg: "multipass is not installed"
    interactive: true
    silent: true

  # TODO: Use yaml config
  mount:
    desc: "Mount a local directory inside an instance. Arguments: HOST|H=docker [SOURCE|S=<path>] (*)"
    summary: |
      [MULTIPASS] Mount a local directory inside an instance.
      Usage: task multipass:mount HOST|H=<hostname> [SOURCE|S=<path>]

      Arguments:
       HOST   | H: Hostname (required)
       SOURCE | S: Path of the local directory to mount (optional, by default current directory)
    vars:
      HOST: '{{.HOST | default .H}}'
      SOURCE: '{{.SOURCE | default .S | default "."}}'
    cmds:
      - |
        full_path=$(readlink -f "{{.SOURCE}}")
        if [ -z "${full_path}" ]; then echo "Error: directory \"{{.SOURCE}}\" not found" && exit 1; fi
        mounts=$(task multipass:get-mounts HOST="{{.HOST}}")
        if echo "${mounts}" | grep -q "${full_path}" 2>/dev/null; then
          echo "${full_path} is already mounted."
        else
          multipass mount "${full_path}" "{{.HOST}}"
          echo "${full_path} is now mounted."
        fi
    preconditions:
      - sh: command -v multipass
        msg: "multipass is not installed"
      - sh: test -n "{{.HOST}}"
        msg: "HOST|H argument is required"
    silent: true

  umount:
    desc: "Unmount a directory from an instance. Arguments: HOST|H=docker [SOURCE|S=<path>] (*)"
    summary: |
      [MULTIPASS] Unmount a directory from an instance.
      Usage: task multipass:umount HOST|H=<hostname> [SOURCE|S=<path>]

      Arguments:
       HOST   | H: Hostname (required)
       SOURCE | S: Path of the local directory to umount (optional, by default current directory)
    vars:
      HOST: '{{.HOST | default .H}}'
      SOURCE: '{{.SOURCE | default .S | default "."}}'
    cmds:
      - |
        full_path=$(readlink -f "{{.SOURCE}}")
        multipass umount "{{.HOST}}:${full_path}"
        echo "${full_path} is now unmounted."
    preconditions:
      - sh: command -v multipass
        msg: "multipass is not installed"
      - sh: test -n "{{.HOST}}"
        msg: "HOST|H argument is required"
    silent: true

  mount-all:
    desc: "Mount all local directories declared in the multipass config file. Arguments: HOST|H=docker (*)"
    summary: |
      [MULTIPASS] Mount all local directories declared in the multipass config file.
      Usage: task multipass:mount-all HOST|H=<hostname>

      Arguments:
       HOST | H: Hostname (optional, by default mount declared directories for all declared hosts)
    vars:
      HOST: '{{.HOST | default .H}}'
      REGEX_HOST: "{.*\"name\": \"{{.HOST}}\".*}"
      LINE_HOST: '{{ mustRegexFind .REGEX_HOST .MULTIPASS_CONFIG }}'
      MOUNTS: "{{ (.LINE_HOST | mustFromJson).mounts }}"
    cmds:
      - |
        for mount in $(echo "{{.MOUNTS}}" | tr "," " "); do
          task multipass:mount HOST="{{.HOST}}" S="$mount"
        done
    preconditions:
      - sh: command -v multipass
        msg: "multipass is not installed"
      - sh: test -n "{{.HOST}}"
        msg: "HOST|H argument is required"
    silent: true

  umount-all:
    desc: "Unmount all directories from an instance. Arguments: HOST|H=docker (*)"
    summary: |
      [MULTIPASS] Unmount all directories from an instance.
      Usage: task multipass:umount-all HOST|H=<hostname>

      Arguments:
       HOST | H: Hostname (required)
    vars:
      HOST: '{{.HOST | default .H}}'
      MOUNTS:
        sh: task multipass:get-mounts HOST="{{.HOST}}"
    cmds:
      - |
        for mount in $(echo "{{.MOUNTS}}" | tr "," " "); do
          task multipass:umount HOST="{{.HOST}}" S="$mount"
        done
    preconditions:
      - sh: command -v multipass
        msg: "multipass is not installed"
      - sh: test -n "{{.HOST}}"
        msg: "HOST|H argument is required"
    silent: true


  # TODO: Add status not found
  list:
    desc: "List instances."
    vars:
      MULTIPASS_HOSTS:
        sh: multipass list
    cmds:
      - |
        printf "%-21s %-21s %-21s %s\n" "Name" "State" "IP" "Mounts"
        {{ range $i, $line := .MULTIPASS_CONFIG | splitLines -}}
          {{ if $line }}
            {{ $name := ($line | mustFromJson).name }}
            {{ if contains $name $.MULTIPASS_HOSTS }}
              {{ range $j, $line_host := $.MULTIPASS_HOSTS | splitLines -}}
                {{ if contains $name $line_host }}
                  {{ $state := (split " " (regexReplaceAll " +" $line_host " "))._1 }}
                  {{if eq $state "Running"}}
                    {{ $ip := (split " " (regexReplaceAll " +" $line_host " "))._2 }}
                    printf "\033[32m%-21s %-21s %-21s %s\033[0m\n" {{$name}} {{$state}} {{$ip}} $(task multipass:get-mounts H={{$name}})
                  {{ else }}
                    printf "\033[33m%-21s %-21s %-21s %s\033[0m\n" {{$name}} {{$state}} "-" $(task multipass:get-mounts H={{$name}})
                  {{ end }}
                {{ end }}
              {{ end -}}
            {{ else }}
              printf "\033[31m%-21s %s\033[0m\n" {{$name}} "Missing"
            {{ end }}
          {{ end }}
        {{ end -}}
    preconditions:
      - sh: command -v multipass
        msg: "multipass is not installed"
    silent: true

  # TODO: Add a task list-all to list all instances and mount points.

  # TODO: Kill not only hyperkit but qemu, use argument.
  # https://multipass.run/docs/hyperkit-migration
  reset:
    desc: "Restart multipass daemon and kill all hyperkit instances"
    cmds:
      - sudo launchctl stop com.canonical.multipassd
      - sudo pkill hyperkit && sleep 2 || true
      - sudo pkill -9 hyperkit || true
      - sudo launchctl start com.canonical.multipassd
    preconditions:
      - sh: command -v multipass
        msg: "multipass is not installed"
    interactive: true
    silent: true

  get-mounts:
    vars:
      HOST: '{{default .H .HOST}}'
    cmds:
      - |
        multipass info "{{.HOST}}" | grep "=>" | awk '{ print $NF }' | tr '\n' ',' | sed 's/,$//'
    preconditions:
      - sh: command -v multipass
        msg: "multipass is not installed"
      - sh: test -n "{{.HOST}}" || test -n "{{.H}}"
        msg: "HOST|H argument is required"
    silent: true
