---
# https://taskfile.dev
# @description: A set of tasks for SBOM (Software Bill Of Materials) management.
# @tags: SBOM, docker, CI, CLI
# @authors: FX Soubirou <soubirou@yahoo.fr>
# @file-raw: https://gitlab.com/op_so/task/task-templates/-/raw/main/Taskfile.d/sbom.yml
# @file-ui: https://gitlab.com/op_so/task/task-templates/-/blob/main/Taskfile.d/sbom.yml
# @home: https://gitlab.com/op_so/task/task-templates
# @links: [cosign](https://github.com/sigstore/cosign),[syft](https://github.com/anchore/syft)
# @license: MIT
# @status: stable
# @deprecated-tasks:

version: '3'

vars:

tasks:

  attach-sbom-attest:
    desc: "Adding an SBOM to an image as an attestation: IMG|I=index.docker.io/jfxs/alpine-task:3.19.0-001 KEY|K=/home/my_dir/cosign.key [DIR|D=.] (*)"
    summary: |
      [SBOM] Adding an SBOM to an image as an attestation in registry.
      Usage: task sbom:attach-sbom-attest IMG|I=<image> KEY|K=<private_key_path> DIR|D=<temporary_directory>

      Arguments:
        IMG | I: Image to analyze (required)
        KEY | K: Cosign private key path (required)
        DIR | D: Temporary directory to save attestation file (optional, current directory by default)

      Requirements:
        - cosign
        - syft
        - COSIGN_PASSWORD env. variable set
        - Registry push permission (docker login ...)
    vars:
      DIR: '{{.DIR | default .D | default "."}}'
      IMG: '{{.IMG | default .I}}'
      KEY: '{{.KEY | default .K}}'
      ATT_FILENAME:
        sh: echo "{{.IMG}}" | sed -E 's/[\/:.@]+/-/g'
    cmds:
      - defer: rm -f "{{.DIR}}/{{.ATT_FILENAME}}.sbom.json"
      - syft -o spdx-json "{{.IMG}}" > "{{.DIR}}/{{.ATT_FILENAME}}.sbom.json"
      - cosign attest --tlog-upload=false --key "{{.KEY}}" --predicate "{{.DIR}}/{{.ATT_FILENAME}}.sbom.json" --type spdxjson "{{.IMG}}"
    preconditions:
      - sh: command -v cosign
        msg: "cosign is not installed"
      - sh: command -v syft
        msg: "syft is not installed"
      - sh: test -n "{{.IMG}}"
        msg: "IMG|I argument is required"
      - sh: test -n "{{.KEY}}"
        msg: "KEY|K argument is required"
    silent: true

  diff-sbom:
    desc: "Compare a subset of 2 SBOM files in syft table format: INPUT1|I1=sbom1.table.txt INPUT2|I2=sbom2.table.txt [GREP|G=^github.com/go-task/task/v3 |^curl ] (*)"
    summary: |
      [SBOM] Compare a subset of 2 SBOM files in syft table format.
      Usage: task sbom:diff-sbom INPUT1|I1=<input_file_1> INPUT2|I2=<input_file_2> [GREP|G=<subset_to_extract>]
      Returns 1 if the subset of files are different, 0 otherwise

      Arguments:
        INPUT1 | I1: Input file 1 (required)
        INPUT2 | I2: Input file 2 (required)
        GREP   | G:  Grep regex to select subset to compare (optional)
    vars:
      INPUT1: '{{.INPUT1 | default .I1}}'
      INPUT2: '{{.INPUT2 | default .I2}}'
      GREP: '{{.GREP | default .G}}'
    cmds:
      - |
        if [ -z "{{.GREP}}" ]; then
          subset1=$(cat "{{.INPUT1}}")
          subset2=$(cat "{{.INPUT2}}")
        else
          if [ -s "{{.INPUT1}}" ]; then
            subset1=$(cat "{{.INPUT1}}" | grep -E "{{.GREP}}")
          else
            subset1=""
          fi
          if [ -s "{{.INPUT2}}" ]; then
            subset2=$(cat "{{.INPUT2}}" | grep -E "{{.GREP}}")
          else
            subset2=""
          fi
        fi
        subset_filter1=$(echo "$subset1" | sed 's/[^[:print:]\t]//g' | sed '/^[[:space:]]*$/d' | sort -u)
        subset_filter2=$(echo "$subset2" | sed 's/[^[:print:]\t]//g' | sed '/^[[:space:]]*$/d' | sort -u)
        diff <(echo "$subset_filter1") <(echo "$subset_filter2") >/dev/null 2>&1 && DIFF=0 || DIFF=1
        echo $DIFF
    preconditions:
      - sh: test -n "{{.INPUT1}}"
        msg: "INPUT1|I1 argument is required"
      - sh: test -n "{{.INPUT2}}"
        msg: "INPUT2|I2 argument is required"
      - sh: test -n "{{.INPUT1}}"
        msg: "INPUT1|I1 argument is required"
      - sh: test -f "{{.INPUT1}}"
        msg: "File {{.INPUT1}} not found"
      - sh: test -f "{{.INPUT2}}"
        msg: "File {{.INPUT2}} not found"
    silent: true

  get-docker-sbom:
    desc: "Get the SBOM with Docker daemon: IMG|I=jfxs/alpine-task [FORMAT|F=cyclonedx-json] (*)"
    summary: |
      [SBOM] Get the SBOM with Docker daemon.
      Usage: task sbom:get-docker-sbom IMG|I=<image> [FORMAT|F=<output_format>]

      Arguments:
        IMG    | I: Image to analyze (required)
        FORMAT | F: Output format syft-json, spdx-json, spdx-tag-value, cyclonedx-json, cyclonedx-xml, github, table, template (optional, by default table)

      Requirements:
        - docker
        - syft
    vars:
      FORMAT: '{{.FORMAT | default .F | default "table"}}'
      IMG: '{{.IMG | default .I}}'
      TMP_FILE: '{{.IMG}}.tmp.tar'
    cmds:
      - defer: rm -f "{{.TMP_FILE}}"
      - docker save "{{.IMG}}" > "{{.TMP_FILE}}"
      - syft "{{.TMP_FILE}}" -o "{{.FORMAT}}"
    preconditions:
      - sh: command -v docker
        msg: "docker is not installed"
      - sh: command -v syft
        msg: "syft is not installed"
      - sh: test -n "{{.IMG}}"
        msg: "IMG|I argument is required"
    silent: true

  get-sbom-attest:
    desc: "Get and verify an SBOM attestation: IMG|I=index.docker.io/jfxs/alpine-task:3.19.0-001 KEY|K=/home/my_dir/cosign.key OUTPUT|O=sbom.json [FORMAT|F=cyclonedx-json] (*)"
    summary: |
      [SBOM] Get and verify an SBOM attestation.
      Usage: task sbom:get-sbom-attest IMG|I=<image> KEY|K=<public_key_path> OUTPUT|O=<sbom_file_path> [FORMAT|F=<output_format>]

      Arguments:
        IMG    | I: Image to analyze (required)
        KEY    | K: Cosign public key path (required)
        OUTPUT | O: Output SBOM file path (required)
        FORMAT | F: Output format syft-json, spdx-json, spdx-tag-value, cyclonedx-json, cyclonedx-xml, github, table, template (optional, by default same as attestation)

      Requirements:
        - cosign
        - syft
    vars:
      FORMAT: '{{.FORMAT | default .F}}'
      IMG: '{{.IMG | default .I}}'
      KEY: '{{.KEY | default .K}}'
      OUTPUT: '{{.OUTPUT | default .O}}'
    cmds:
      - defer: rm -f "{{.OUTPUT}}.tmp"
      - cosign verify-attestation --insecure-ignore-tlog=true --key "{{.KEY}}" --type spdxjson "{{.IMG}}"  | jq '.payload | @base64d | fromjson | .predicate' > "{{.OUTPUT}}.tmp"
      - |
        if [ -z "{{.FORMAT}}" ]; then
          mv "{{.OUTPUT}}.tmp" "{{.OUTPUT}}"
        else
          syft convert "{{.OUTPUT}}.tmp" -o "{{.FORMAT}}={{.OUTPUT}}"
        fi
    preconditions:
      - sh: command -v cosign
        msg: "cosign is not installed"
      - sh: command -v syft
        msg: "syft is not installed"
      - sh: test -n "{{.IMG}}"
        msg: "IMG|I argument is required"
      - sh: test -n "{{.KEY}}"
        msg: "KEY|K argument is required"
      - sh: test -n "{{.OUTPUT}}"
        msg: "OUTPUT|O argument is required"
    silent: true

  get-sbom-subset:
    desc: "Get an SBOM subset in table format: INPUT|I=sbom-table.txt OUTPUT|O=sbom-subset.txt [GREP|G=^github.com/go-task/task/v3 |^curl ] (*)"
    summary: |
      [SBOM] Get an SBOM subset in table format.
      Usage: task sbom:get-sbom-subset INPUT|I=<sbom_file_path> OUTPUT|O=<subset_file_path> [GREP|G=<subset_to_extract>]

      Arguments:
        INPUT  | I: SBOM file in syft table format (required)
        OUTPUT | O: Output SBOM file path (required)
        GREP   | G: Grep regex to select subset (optional, if not set returns all)
    vars:
      GREP: '{{.GREP | default .G}}'
      INPUT: '{{.INPUT | default .I}}'
      OUTPUT: '{{.OUTPUT | default .O}}'
    cmds:
      - |
        if [ -z "{{.GREP}}" ]; then
          cat "{{.INPUT}}" | sed '/NAME/d' > "{{.OUTPUT}}"
        else
          cat "{{.INPUT}}" | grep -E "{{.GREP}}" > "{{.OUTPUT}}"
        fi
    preconditions:
      - sh: test -n "{{.INPUT}}"
        msg: "INPUT|I argument is required"
      - sh: test -n "{{.OUTPUT}}"
        msg: "OUTPUT|O argument is required"
      - sh: test -f "{{.INPUT}}"
        msg: "File {{.INPUT}} not found"
    silent: true

  set-sbom-in-file:
    desc: "Insert an SBOM table in README file: SBOM|S=sbom-table.txt [README|R=README.md] [PATTERN|P=--SBOM-TABLE--] (*)"
    summary: |
      [SBOM] Insert an SBOM table in README file.
      Usage: task sbom:set-sbom-in-file SBOM|S=<sbom_file_path> [README|R=<readme_file_path>] [PATTERN|P=<pattern_to_replace>]

      Arguments:
        SBOM    | S  SBOM file path in table syft format (required)
        README  | R  README file path (optional, by default README.md)
        PATTERN | P  Pattern to replace with the SBOM table (optional, by default --SBOM-TABLE--)
    vars:
      PATTERN: '{{.PATTERN | default .P | default "--SBOM-TABLE--"}}'
      README: '{{.README | default .R | default "README.md"}}'
      SBOM: '{{.SBOM | default .S}}'
      HEAD: "| Name | Version | Type |\\n|------|------|------|"
    cmds:
      - defer: rm -f "{{.README}}.bu"
      - |
        table="{{.HEAD}}"
        while read -r line; do
          name=$(echo $line | awk '{ print $1 }')
          version=$(echo $line | awk '{ print $2 }')
          type=$(echo $line | awk '{ print $3 }')
          table="$table\\n| $name | $version  | $type |"
        done < {{.SBOM}}
        sed -i'.bu' "s=^{{.PATTERN}}.*=$table=g" "{{.README}}"
    preconditions:
      - sh: test -n "{{.SBOM}}"
        msg: "SBOM|S argument is required"
      - sh: test -f "{{.SBOM}}"
        msg: "File {{.SBOM}} not found"
    silent: true
