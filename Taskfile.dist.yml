---
# https://taskfile.dev
#
# Do not edit this file, instead use Taskfile.project.yml.
#
version: '3'

vars:
  DIR_TASKFILES: "Taskfile.d"
  FILE_TASK_START: "task-start-{{.TASK}}.txt"
  TT_GIT_REPO: "https://gitlab.com/op_so/task/task-templates/-/raw/main"

includes:
  00:
    taskfile: "Taskfile.project.yml"
    optional: true
    # BEGIN-INCLUDES-TEMPLATES
  RUN_00:00-install-templates_TO_UPDATE:
    taskfile: "RUN_00:00-install-templates_TO_UPDATE.yml"
    optional: true
    # END-INCLUDES-TEMPLATES

tasks:

  10-install-templates:
    #  summary: |
    #    [CORE] Activate Tasks templates.
    #    Usage: task [-t Taskfile.dist.yml] 10-t-activate TEMPLATE|T=<template1-name>,<template2-name> [FILE|F=Taskfile.dist.yml]
    #
    #    Arguments:
    #    TEMPLATE | T List of the templates to activate separated by comma (required)
    #     FILE | F     Taskfile path (optional, by default Taskfile.yml)
    vars:
      TEMPLATE: '{{default .T .TEMPLATE}}'
      FILE: '{{default .F .FILE}}'
      D_FILE: '{{default "Taskfile.yml" .FILE}}'
      BEGIN: "    # BEGIN-INCLUDES-TEMPLATES"
      PATTERN_BEGIN: "^{{.BEGIN}}"
      PATTERN_END: "^    # END-INCLUDES-TEMPLATES"
    cmds:
      - mkdir -p "{{.DIR_TASKFILES}}"
      - defer: rm -f "{{.D_FILE}}".bu
      - sed -i'.bu' '/{{.PATTERN_BEGIN}}/,//{/{{.PATTERN_BEGIN}}/!{/^    \# END-INCLUDES-TEMPLATES/!d;};}' "{{.D_FILE}}"
      - |
        includes="{{.BEGIN}}"
        for t in $(echo "{{.TEMPLATE}}" | tr "," " "); do
          includes="$includes\\n  ${t}:\\n    taskfile: {{.DIR_TASKFILES}}/${t}.yml\\n    optional: true"
        done
        sed -i'.bu' "s={{.PATTERN_BEGIN}}=${includes}=g" "{{.D_FILE}}"
      - |
        for t in $(echo "{{.TEMPLATE}}" | tr "," " "); do
          echo "Download template ${t}..."
          task download-template TEMPLATE=${t}.yml
        done
    preconditions:
      - sh: test -n "{{.TEMPLATE}}" || test -n "{{.T}}"
        msg: "TEMPLATE|T argument is required"
    silent: true

  usage:
    desc: "[CORE] Show the usage of a task. Arguments: TSK|T=task-name [FILE|F=Taskfile.dist.yml] (*)"
    summary: |
      [CORE] Show the usage of a task.
      Usage: task [-t Taskfile.dist.yml] usage TSK|T=<task-name> [FILE|F=Taskfile.dist.yml]

      Arguments:
       TSK | T  Name of the task (required)
       FILE | F Taskfile path (optional, by default Taskfile.yml)
    vars:
      TSK: '{{default .T .TSK}}'
      FILE: '{{default .F .FILE}}'
      FILE_DEFAULT: "Taskfile.yml"
      FILE_PATH: '{{default .FILE_DEFAULT .FILE}}'
    cmds:
      - |
        if [ ! -f "{{.FILE_PATH}}" ]; then
          echo "{{.FILE_PATH}} does not exist!"
          exit 1
        fi
      - task -t "{{.FILE_PATH}}" --summary "{{.TSK}}" | sed '/^dependencies:$/,$d' | sed '/^commands:$/,$d'
    preconditions:
      - sh: test -n "{{.TSK}}" || test -n "{{.T}}"
        msg: "TSK|T argument is required"
    silent: true

  default:
    desc: "[CORE] List of available tasks. Arguments: [FILE|F=Taskfile.dist.yml] (*)"
    summary: |
      [CORE] Show the list of available tasks.
      Usage: task [-t Taskfile.dist.yml] [FILE|F=Taskfile.dist.yml]

      Arguments:
       FILE | F Taskfile path (optional, by default Taskfile.yml)
    vars:
      FILE: '{{default .F .FILE}}'
      FILE_DEFAULT: "Taskfile.yml"
      FILE_PATH: '{{default .FILE_DEFAULT .FILE}}'
      TASKS_LIST:
        sh: task --list -t "{{.FILE_PATH}}"
    cmds:
      - |
        {{ range $i, $line := .TASKS_LIST | splitLines -}}
          first_char="$(printf '%s' "{{ $line }}" | cut -c1)"
          if [ "$first_char" = "*" ]; then
             task=$(echo "{{ $line }}" | cut -d ' ' -f2)
             desc=$(echo "{{ $line }}" | sed -e "s/^\* $task//" | sed 's/^[[:space:]]*//g')
             printf "\e[32m%-26s \033[0m %s\n" "* $task" "$desc"
          else
            echo "{{ $line }}"
          fi
        {{ end -}}
      - echo ""
      - echo " (*) <task usage TSK=task-name> will show the usage of the task."
      - echo ""
    silent: true

  download-template:
    cmds:
      - |
        if [ -x "$(command -v curl)" ]; then
          curl --progress-bar -o "{{.DIR_TASKFILES}}/{{.TEMPLATE}}" "{{.TT_GIT_REPO}}/{{.DIR_TASKFILES}}/{{.TEMPLATE}}"
        else
          wget -cq -O "{{.DIR_TASKFILES}}/{{.TEMPLATE}}" "{{.TT_GIT_REPO}}/{{.DIR_TASKFILES}}/{{.TEMPLATE}}"
        fi
    preconditions:
      - sh: test -n "{{.TEMPLATE}}"
        msg: "TEMPLATE argument is required"
      - sh: command -v curl || command -v wget
        msg: "curl or wget are not installed"
    silent: true
